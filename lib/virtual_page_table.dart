class VirtualPage {
  final int pageNumber;

  /// біт присутності, встановлюється ядром ОС при створенні відображення,
  /// скидається ядром (встановлюється у значення 0) при знищенні відображення,
  /// перевіряється MMU при кожному звертанні до сторінці.
  /// Якщо біт P встановлений, то всі інші атрибути мають сенс.
  /// Якщо біт P не встановлений, то при звертанні до сторінці виникає
  /// виключна ситуація (exception) “сторінковий промах” (page fault).
  bool presenceBit;
  bool get P => presenceBit;

  /// Встановлюється MMU при кожному звертанні до сторінки.
  /// Ядро може перевірити чи було звертання до сторінки з моменту
  /// попередньої перевірки, після перевірки ядро зазвичай скидає цей біт.
  bool referenceBit;
  bool get R => referenceBit;

  /// Встановлюється MMU при кожній модифікації даних в сторінці. Ядро може
  /// перевірити чи була модифікована сторінка. Модифікована сторінка
  /// називається “брудною” (dirty). Вміст модифікованої сторінки існує тільки в
  /// оперативній пам’яті, якщо ядро збереже вміст модифікованої сторінки у
  /// відповідній об’єкт ФС і для неї ядро скине цей біт, то така сторінка
  /// називається “чистою” (clean), а сама сторінка називається “кешем” (cache)
  /// сторінки (кеш сторінки об’єкту з ФС).
  bool modificationBit;
  bool get M => modificationBit;

  /// Достатньо зберігати тільки номер фізичної сторінки,
  /// зміщення (offset) у фізичній сторінки береться зі
  /// зміщення у віртуальній адресі.
  int? physicalPageNumber;

  VirtualPage({
    required this.pageNumber,
    this.presenceBit = false,
    this.referenceBit = false,
    this.modificationBit = false,
    this.physicalPageNumber,
  });
}

typedef VirtualPageTable = List<VirtualPage>;
